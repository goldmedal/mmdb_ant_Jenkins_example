<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="unitTest_example">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="D:/eclipse/plugins/org.junit_4.11.0.v201303080030/junit.jar"/>
        <pathelement location="D:/eclipse/plugins/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <path id="unitTest_example.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>
              	
  	<property name="cobertura.dir" value="D:/cobertura-2.1.1" />

  	<path id="cobertura.classpath">
  	    <fileset dir="${cobertura.dir}">
  	        <include name="cobertura.jar" />
  	        <include name="lib/**/*.jar" />
  	    </fileset>
  	</path>

  	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />  
              	
	<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
	    <!--
	        Specify the name of the coverage data file to use.
	        The value specified below is the default.
	    -->
	    <sysproperty key="net.sourceforge.cobertura.datafile"
	        file="${basedir}/cobertura.ser" />
	
	    <!--
	        Note the classpath order: instrumented classes are before the
	        original (uninstrumented) classes.  This is important.
	    -->
	    <classpath location="${instrumented.dir}" />
	    <classpath location="${classes.dir}" />
	
	    <!--
	        The instrumented classes reference classes used by the
	        Cobertura runtime, so Cobertura and its dependencies
	        must be on your classpath.
	    -->
	    <classpath refid="cobertura_classpath" />
	
	    <formatter type="xml" />
	    <test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
	    <batchtest todir="${reports.xml.dir}" unless="testcase">
	        <fileset dir="${src.dir}">
	            <include name="**/*Test.java" />
	        </fileset>
	    </batchtest>
	</junit>       
		
  	<cobertura-report format="html" destdir="${coveragereport.dir}" >
  	    <fileset dir="${src.dir}">
  	        <include name="**/*.java" />
  	        <exclude name="**/*Stub.java" />
  	    </fileset>
  	    <fileset dir="${guisrc.dir}">
  	        <include name="**/*.java" />
  	        <exclude name="**/*RB.java" />
  	    </fileset>
  	</cobertura-report>  
              	
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="unitTest_example.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="CourseTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="unitTest_example.CourseTest" todir="${junit.output.dir}"/>
            <classpath refid="unitTest_example.classpath"/>
        </junit>
    </target>
    <target name="CourseTest.tearDown">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="unitTest_example.CourseTest" todir="${junit.output.dir}"/>
            <classpath refid="unitTest_example.classpath"/>
        </junit>
    </target>
    <target name="CourseTest.test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="unitTest_example.CourseTest" todir="${junit.output.dir}"/>
            <classpath refid="unitTest_example.classpath"/>
        </junit>
    </target>
    <target name="main">
        <java classname="unitTest_example.main" failonerror="true" fork="yes">
            <classpath refid="unitTest_example.classpath"/>
        </java>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
